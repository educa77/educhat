{"version":3,"sources":["components/Login.js","hooks/useLocalStorage.js","context/ContactsProvider.js","context/SocketProvider.js","context/ConversationsProvider.js","components/Conversations.js","components/Contacts.js","components/NewConversationModal.js","components/NewContactModal.js","components/Sidebar.js","components/OpenConversation.js","components/Dahboard.js","components/App.js","index.js"],"names":["Login","onIdSubmit","idRef","useRef","Container","className","style","height","Form","onSubmit","e","preventDefault","current","value","Group","Label","Control","type","ref","required","Button","onClick","uuidV4","variant","useLocalStorage","key","initialValue","prefixedKey","useState","jsonValue","localStorage","getItem","JSON","parse","setValue","useEffect","setItem","stringify","ContactsContext","React","createContext","useContacts","useContext","ContactsProvider","children","contacts","setContacts","Provider","createContact","id","name","prevContacts","io","require","SocketContext","SocketProvider","socket","setSocket","newSocket","query","withCredentials","extraHeaders","close","ConversationsContext","useConversations","ConversationsProvider","conversations","setConversations","selectedConversationIndex","setSelectedConversationIndex","addMessageToConversation","useCallback","recipients","text","sender","prevConversations","madeChange","newMessage","newConversations","map","conversation","a","b","length","sort","every","element","index","messages","on","off","formattedConversations","recipient","contact","find","message","fromMe","senderName","selected","sendMessage","emit","selectConversationIndex","createConversation","selectedConversation","Conversations","ListGroup","Item","action","active","r","join","Contacts","NewConversationModal","closeModal","selectedContactsIds","setSelectedContactIds","Modal","Header","closeButton","Body","controlId","Check","includes","label","onChange","contactId","prevSelectedContactIds","filter","prevId","NewContactModal","nameRef","CONVERSATIONS_KEY","CONTACTS_KEY","Sidebar","activeKey","setActiveKey","conversationsOpen","modalOpen","setModalOpen","width","Tab","onSelect","Nav","Link","eventKey","Content","Pane","show","onHide","OpenConversation","setText","setRef","node","scrollIntoView","view","lastMessage","InputGroup","as","target","resize","Append","Dahboard","App","setId","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f507fb34.chunk.js","sourcesContent":["import React, { useRef } from 'react';\nimport { Container, Form, Button } from 'react-bootstrap';\nimport { v4 as uuidV4 } from 'uuid';\n\n\nexport default function Login({ onIdSubmit }) {\n\n    const idRef = useRef();\n\n    function handleSubmit(e) {\n        e.preventDefault();\n        onIdSubmit(idRef.current.value);\n    }\n\n    function createNewID() {\n        onIdSubmit(uuidV4());\n    }\n\n    return (\n        <Container className=\"align-items-center d-flex\" style={{height: '100vh'}}>\n            <Form className=\"w-100\" onSubmit={handleSubmit} >\n                <Form.Group>\n                    <Form.Label>Enter your ID</Form.Label>\n                    <Form.Control type=\"text\" ref={idRef} required />\n                </Form.Group>\n                <Button type=\"submit\" className=\"mr-2\">Login</Button>\n                <Button onClick={createNewID} variant=\"secondary\">Create a new ID</Button>\n            </Form>\n        </Container>\n    )\n}\n","import { useState, useEffect } from 'react';\n\nconst PREFIX = 'educhat-';\n\n\nexport default function useLocalStorage(key, initialValue) {\n    const prefixedKey = PREFIX + key;\n    const [value, setValue] = useState(() => {\n        const jsonValue = localStorage.getItem(prefixedKey)\n        if (jsonValue != null) return JSON.parse(jsonValue)\n        if (typeof initialValue === 'function') {\n            return initialValue()\n        } else {\n            return initialValue\n        }\n    });\n\n    useEffect(() => {\n        localStorage.setItem(prefixedKey, JSON.stringify(value))\n    }, [prefixedKey, value])\n\n    return [value, setValue]\n}\n","import React, { useContext } from 'react';\nimport useLocalStorage from '../hooks/useLocalStorage';\n\n\nconst ContactsContext = React.createContext();\n\nexport function useContacts() {\n    return useContext(ContactsContext)\n}\n\nexport function ContactsProvider({ children }) {\n\n    const [contacts, setContacts] = useLocalStorage('contacts', []);\n\n    function createContact(id, name) {\n        setContacts(prevContacts => {\n            return [...prevContacts, {id, name}]\n        })\n    };\n\n    \n    return (\n        <ContactsContext.Provider value={{ contacts, createContact }}>\n            {children}\n        </ContactsContext.Provider>\n    )\n}\n","import React, { useContext, useEffect, useState } from 'react';\nconst io = require(\"socket.io-client\");\n\nconst SocketContext = React.createContext();\n\nexport function useSocket() {\n    return useContext(SocketContext);\n}\n\nexport function SocketProvider({ id, children }) {\n\n    const [socket, setSocket] = useState()\n\n    useEffect(() => {\n        const newSocket = io(\n            'http://localhost:5000',\n            {\n                query: { id },\n                withCredentials: true,\n                extraHeaders: {\n                \"my-custom-header\": \"abcd\"\n                }\n            }\n        )\n        setSocket(newSocket)\n\n        return () => newSocket.close()\n    }, [id])\n    \n    return (\n        <SocketContext.Provider value={socket}>\n            {children}\n        </SocketContext.Provider>\n    )\n}\n","import React, { useContext, useState, useEffect, useCallback } from 'react';\nimport useLocalStorage from '../hooks/useLocalStorage';\nimport { useContacts } from './ContactsProvider';\nimport { useSocket } from '../context/SocketProvider';\n\nconst ConversationsContext = React.createContext();\n\nexport function useConversations() {\n    return useContext(ConversationsContext)\n}\n\nexport function ConversationsProvider({ id, children }) {\n\n    const [conversations, setConversations] = useLocalStorage('conversations', []);\n\n    const [selectedConversationIndex, setSelectedConversationIndex] = useState(0)\n\n    const { contacts } = useContacts();\n\n    const socket = useSocket();\n\n    function createConversation(recipients) {\n        setConversations(prevConversations => {\n            return [...prevConversations, { recipients, messages: [] }]\n        })\n    };\n\n    const addMessageToConversation = useCallback(({ recipients, text, sender }) => {\n        setConversations(prevConversations => {\n            let madeChange = false;\n            const newMessage = { sender, text };\n            const newConversations = prevConversations.map(conversation => {\n                if (arrayEquality(conversation.recipients, recipients)) {\n                    madeChange = true;\n                    return {\n                        ...conversation,\n                        messages: [...conversation.messages, newMessage]\n                    }\n                }\n                return conversation;\n            })\n            if (madeChange) {\n                return newConversations;\n            } else {\n                return [\n                    ...prevConversations,\n                    { recipients, messages: [newMessage] }\n                ]\n            }\n        })\n\n    },[setConversations])\n\n    useEffect(() => {\n        if (socket == null) return\n        socket.on('receive-message', addMessageToConversation);\n        return () => socket.off('receive-message')\n    },[socket, addMessageToConversation])\n\n    function sendMessage(recipients, text) {\n        socket.emit('send-message', { recipients, text })\n        \n        addMessageToConversation({recipients, text, sender: id})\n    }\n   \n    const formattedConversations = conversations.map((conversation, index) => {\n        const recipients = conversation.recipients.map(recipient => {\n            const contact = contacts.find(contact => {\n                return contact.id === recipient\n            })\n            const name = (contact && contact.name) || recipient\n            return { id: recipient, name }\n        })\n\n        const messages = conversation.messages.map(message => {\n            const contact = contacts.find(contact => {\n                return contact.id === message.sender\n            })\n            const name = (contact && contact.name) || message.sender;\n            const fromMe = id === message.sender\n            return { ...message, senderName: name, fromMe };\n        })\n\n        const selected = index === selectedConversationIndex\n        return { ...conversation, messages, recipients, selected };\n    });\n\n    const value = {\n        conversations: formattedConversations,\n        sendMessage,\n        selectConversationIndex: setSelectedConversationIndex,\n        createConversation,\n        selectedConversation: formattedConversations[selectedConversationIndex]\n    }\n    \n    return (\n        <ConversationsContext.Provider value={value}>\n            {children}\n        </ConversationsContext.Provider>\n    )\n}\n\nfunction arrayEquality(a, b) {\n    if (a.length !== b.length) return false;\n\n    a.sort();\n    b.sort();\n    return a.every((element, index) => {\n        return element === b[index];\n    })\n\n}","import React from 'react';\nimport { ListGroup } from 'react-bootstrap';\nimport { useConversations } from '../context/ConversationsProvider';\n\nexport default function Conversations() {\n\n    const { conversations, selectConversationIndex } = useConversations();\n\n    return (\n        <ListGroup variant=\"flush\">\n            {conversations.map((conversation, index) => (\n                <ListGroup.Item\n                    key={index}\n                    action\n                    onClick={() => selectConversationIndex(index)}\n                    active={conversation.selected}\n                >\n                    {conversation.recipients.map(r => r.name).join(', ')}\n                </ListGroup.Item>\n            ))}\n        </ListGroup>\n    )\n}\n","import React from 'react';\nimport { ListGroup } from 'react-bootstrap';\nimport { useContacts } from '../context/ContactsProvider';\n\n\nexport default function Contacts() {\n\n    const { contacts } = useContacts();\n\n\n    return (\n        <ListGroup variant=\"flush\">\n            {contacts.map(contact => (\n                <ListGroup.Item key={contact.id}>\n                    {contact.name}\n                </ListGroup.Item>\n            ))}\n        </ListGroup>\n    )\n}\n","import React, { useState } from 'react';\nimport { Modal, Form, Button } from 'react-bootstrap';\nimport { useContacts } from '../context/ContactsProvider';\nimport { useConversations } from '../context/ConversationsProvider';\n\n\n\nexport default function NewConversationModal({ closeModal }) {\n    \n    const [selectedContactsIds, setSelectedContactIds] = useState([]);\n    const { contacts } = useContacts();\n    const { createConversation } = useConversations();\n\n    function handleCheckboxChange(contactId) {\n        setSelectedContactIds(prevSelectedContactIds => {\n            if (prevSelectedContactIds.includes(contactId)) {\n                return prevSelectedContactIds.filter(prevId => {\n                    return contactId !== prevId\n                })\n            } else {\n                return [...prevSelectedContactIds, contactId]\n            }\n        })\n    }\n\n    function handleSubmit(e) {\n        e.preventDefault();\n        createConversation(selectedContactsIds)\n        closeModal();\n    }\n\n    return (\n        <>\n            <Modal.Header closeButton>Create Conversation</Modal.Header>   \n            <Modal.Body>\n                <Form onSubmit={handleSubmit}>\n                    {contacts.map(contact => (\n                        <Form.Group controlId={contact.id} key={contact.id}>\n                            <Form.Check\n                                type=\"checkbox\"\n                                value={selectedContactsIds.includes(contact.id)}\n                                label={contact.name}\n                                onChange={() => handleCheckboxChange(contact.id)}\n                                />\n                        </Form.Group>\n                    ))}\n                    <Button type='submit'>Create</Button>\n                </Form>\n            </Modal.Body>\n        </>\n    )\n}\n","import React, { useRef } from 'react';\nimport { Modal, Form, Button } from 'react-bootstrap';\nimport { useContacts } from '../context/ContactsProvider';\n\n\n\nexport default function NewContactModal({ closeModal }) {\n\n    const idRef = useRef();\n    const nameRef = useRef();\n    const { createContact } = useContacts();\n\n    function handleSubmit(e) {\n        e.preventDefault();\n        createContact(idRef.current.value, nameRef.current.value);\n        closeModal();\n    }\n    \n    return (\n        <>\n            <Modal.Header closeButton>Create Contact</Modal.Header>   \n            <Modal.Body>\n                <Form onSubmit={handleSubmit}>\n                    <Form.Group>\n                        <Form.Label>ID</Form.Label>\n                        <Form.Control type=\"text\" ref={idRef} required/>\n                    </Form.Group>\n                    <Form.Group>\n                        <Form.Label>Name</Form.Label>\n                        <Form.Control type=\"text\" ref={nameRef} required/>\n                    </Form.Group>\n                    <Button type='submit'>Create</Button>\n                </Form>\n            </Modal.Body>\n        </>\n    )\n}\n","import React, { useState } from 'react';\nimport { Tab, Nav, Button, Modal } from 'react-bootstrap';\nimport Conversations from './Conversations';\nimport Contacts from './Contacts';\nimport NewConversationModal from './NewConversationModal';\nimport NewContactModal from './NewContactModal';\n\nconst CONVERSATIONS_KEY = 'conversations';\nconst CONTACTS_KEY = 'contacts';\n\n\nexport default function Sidebar({ id }) {\n\n    const [activeKey, setActiveKey] = useState(CONVERSATIONS_KEY);\n    const conversationsOpen = activeKey === CONVERSATIONS_KEY;\n    const [modalOpen, setModalOpen] = useState(false);\n\n    function closeModal() {\n        setModalOpen(false);\n    }\n    \n    return (\n        <div style={{width: '250px' }} className=\"d-flex flex-column\" >\n            <Tab.Container activeKey={activeKey} onSelect={setActiveKey} >\n                <Nav variant=\"tabs\" className=\"justify-content-center\" >\n                    <Nav.Item>\n                        <Nav.Link eventKey={CONVERSATIONS_KEY}>Conversations</Nav.Link>\n                    </Nav.Item>\n                    <Nav.Item>\n                        <Nav.Link eventKey={CONTACTS_KEY} >Contacts</Nav.Link>\n                    </Nav.Item>\n                </Nav>\n                <Tab.Content className=\"border-right overflow-auto flex-grow-1\">\n                    <Tab.Pane eventKey={CONVERSATIONS_KEY}>\n                        <Conversations />\n                    </Tab.Pane>\n                    <Tab.Pane eventKey={CONTACTS_KEY}>\n                        <Contacts />\n                    </Tab.Pane>\n                </Tab.Content>\n                <div className=\"p-2 border-top border-right small\">\n                    Your ID: <span className=\"text-muted\">{id}</span>\n                </div>\n                <Button className=\"rounded-0\" onClick={() => setModalOpen(true)} >\n                    New {conversationsOpen ? 'Conversation' : 'Contact'}\n                </Button>\n            </Tab.Container>\n            <Modal show={modalOpen} onHide={closeModal}>\n                { conversationsOpen ? \n                    <NewConversationModal closeModal={closeModal} /> : \n                    <NewContactModal closeModal={closeModal}/>\n            }\n            </Modal>\n        </div>\n    )\n}\n","import React, { useState, useCallback } from 'react';\nimport { Form, InputGroup, Button } from 'react-bootstrap';\nimport { useConversations} from '../context/ConversationsProvider';\n\n\nexport default function OpenConversation() {\n\n    const [text, setText] = useState('');\n    const { sendMessage } = useConversations();\n    const { selectedConversation } = useConversations();\n    const setRef = useCallback(node => {\n        if(node){\n            node.scrollIntoView({ view: true });\n            }\n    }, []);\n\n    function handleSubmit(e) {\n        e.preventDefault();\n\n        sendMessage(selectedConversation.recipients.map(r => r.id),\n        text\n        );\n        setText('');\n    }\n\n\n    return (\n        <div className=\"d-flex flex-column flex-grow-1\">\n            <div className=\"flex-grow-1 overflow-auto\">\n                <div className=\"d-flex flex-column align-items-start justify-content-end px-3\">\n                    {selectedConversation.messages.map((message, index) => {\n                        const lastMessage = selectedConversation.messages.length - 1 === index;\n                        return (\n                            <div\n                                ref={lastMessage ? setRef : null}\n                                key={index}\n                                className={`my-1 d-flex flex-column ${message.fromMe ? `align-self-end align-items-end` : `align-items-start`}`}\n                            >\n                                <div className={`rounded px-2 py-1 ${message.fromMe ? `bg-primary text-white` : `border`}`} >\n                                    {message.text}\n                                </div>\n                                <div className={`text-muted small ${message.fromMe ? `text-right` : ``}`}>\n                                    {message.fromMe ? 'You' : message.senderName}\n                                </div>\n                            </div>\n                        )\n                    })}\n                </div>\n            </div>\n            <Form onSubmit={handleSubmit}>\n                <Form.Group className=\"m-2\">\n                    <InputGroup>\n                        <Form.Control\n                            as=\"textarea\"\n                            required\n                            value={text}\n                            onChange={e => setText(e.target.value)}\n                            style={{ height: '75px', resize: 'none' }}\n                        />\n                        <InputGroup.Append>\n                        <Button type=\"submit\">Send</Button>\n                        </InputGroup.Append>\n                    </InputGroup>\n                </Form.Group>\n            </Form>\n        </div>\n    )\n}\n","import React from 'react';\nimport Sidebar from './Sidebar';\nimport OpenConversation from './OpenConversation';\nimport { useConversations } from '../context/ConversationsProvider';\n\n\n\nexport default function Dahboard({ id }) {\n\n    const { selectedConversation } = useConversations();\n    \n    return (\n        <div className=\"d-flex\" style={{ height: '100vh'}} >\n            <Sidebar id={id} />\n           {selectedConversation && <OpenConversation />}\n        </div>\n    )\n}\n","import React from 'react';\nimport Login from './Login';\nimport useLocalStorage from '../hooks/useLocalStorage';\nimport Dashboard from './Dahboard';\nimport { ContactsProvider } from '../context/ContactsProvider';\nimport { ConversationsProvider } from '../context/ConversationsProvider';\nimport { SocketProvider } from '../context/SocketProvider';\n\n\nfunction App() {\n\n  const [id, setId] = useLocalStorage('id');\n\n  const dashboard = (\n    <SocketProvider id={id}>\n      <ContactsProvider>\n        <ConversationsProvider id={id}>\n          <Dashboard id={id} />\n        </ConversationsProvider>\n      </ContactsProvider>\n    </SocketProvider>\n  )\n\n  return (\n\n      id ? dashboard : <Login onIdSubmit={setId} />\n\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}